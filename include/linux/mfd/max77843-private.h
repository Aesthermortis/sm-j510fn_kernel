/*
 * max77843-private.h - Voltage regulator driver for the Maxim 77843
 *
 *  Copyright (C) 2011 Samsung Electrnoics
 *  SangYoung Son <hello.son@samsung.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#ifndef __LINUX_MFD_MAX77843_PRIV_H
#define __LINUX_MFD_MAX77843_PRIV_H

#include <linux/i2c.h>

#define MAX77843_I2C_ADDR		(0x92)

#define MAX77843_NUM_IRQ_MUIC_REGS	3
#define MAX77843_REG_INVALID		(0xff)

#define MAX77843_IRQSRC_CHG		(1 << 0)
#define MAX77843_IRQSRC_TOP		(1 << 1)
#define MAX77843_IRQSRC_FG		(1 << 2)
#define MAX77843_IRQSRC_MUIC		(1 << 3)

/* pmic revision */
enum max77843_pmic_rev {
	MAX77843_REV_PASS1	= 0x00,
	MAX77843_REV_PASS2	= 0x01,
	MAX77843_REV_PASS3	= 0x02,
};

/* Slave addr = 0x92: PMIC/HAPTIC */
enum max77843_pmic_reg {
	MAX77843_PMIC_REG_PMICID	= 0x00,
	MAX77843_PMIC_REG_PMICREV	= 0x01,

	MAX77843_PMIC_REG_INTSRC	= 0x22,
	MAX77843_PMIC_REG_INTSRC_MASK	= 0x23,
	MAX77843_PMIC_REG_TOPSYS_INT	= 0x24,
	MAX77843_PMIC_REG_RESERVED_25	= 0x25,
	MAX77843_PMIC_REG_SYS_INT_MASK	= 0x26,
	MAX77843_PMIC_REG_RESERVED_27	= 0x27,
	MAX77843_PMIC_REG_TOPSYS_STAT	= 0x28,
	MAX77843_PMIC_REG_RESERVED_29	= 0x29,
	MAX77843_PMIC_REG_MAINCTRL1	= 0x02,
	MAX77843_PMIC_REG_LSCNFG	= 0x2B,
	MAX77843_PMIC_REG_RESERVED_2C	= 0x2C,
	MAX77843_PMIC_REG_RESERVED_2D	= 0x2D,

	/* Haptic motor driver Registers */
	MAX77843_PMIC_REG_MCONFIG	= 0x10,

	MAX77843_PMIC_REG_END,
};

/* Slave addr = 0xD2 : Charger */
enum max77843_charger_reg {
	MAX77843_CHG_REG_INT                    = 0xB0,
	MAX77843_CHG_REG_INT_MASK               = 0xB1,
	MAX77843_CHG_REG_INT_OK                 = 0xB2,
	MAX77843_CHG_REG_DETAILS_00             = 0xB3,
	MAX77843_CHG_REG_DETAILS_01             = 0xB4,
	MAX77843_CHG_REG_DETAILS_02             = 0xB5,
	MAX77843_CHG_REG_CNFG_00                = 0xB7,
	MAX77843_CHG_REG_CNFG_01                = 0xB8,
	MAX77843_CHG_REG_CNFG_02                = 0xB9,
	MAX77843_CHG_REG_CNFG_03                = 0xBA,
	MAX77843_CHG_REG_CNFG_04                = 0xBB,
	MAX77843_CHG_REG_CNFG_06                = 0xBD,
	MAX77843_CHG_REG_CNFG_07                = 0xBE,
	MAX77843_CHG_REG_CNFG_09                = 0xC0,
	MAX77843_CHG_REG_CNFG_10                = 0xC1,
	MAX77843_CHG_REG_CNFG_11                = 0xC2,
	MAX77843_CHG_REG_CNFG_12                = 0xC3,
	MAX77843_CHG_REG_CHG_CNFG_13			= 0xC4,
	MAX77843_CHG_REG_CHG_CNFG_14			= 0xC5,
	MAX77843_CHG_REG_SAFEOUT_CTRL			= 0xC6,

	MAX77843_CHG_REG_END,
};

/* Slave addr = 0x94: LED */
enum max77843_led_reg {
	MAX77843_LED_REG_STATUS1	= 0x02,
	MAX77843_LED_REG_STATUS2	= 0x03,
	MAX77843_LED_REG_I_FLASH1	= 0x04,
	MAX77843_LED_REG_I_TORCH1	= 0x05,
	MAX77843_LED_REG_MODE_SEL	= 0x06,
	MAX77843_LED_REG_FLASH_RAMP_SEL	= 0x07,
	MAX77843_LED_REG_TORCH_RAMP_SEL	= 0x08,
	MAX77843_LED_REG_FLASH_TMR_CNTL	= 0x09,
	MAX77843_LED_REG_TORCH_TMR_CNTL	= 0x0A,
	MAX77843_LED_REG_MAXFLASH1	= 0x0B,
	MAX77843_LED_REG_MAXFLASH2	= 0x0C,
	MAX77843_LED_REG_MAXFLASH3	= 0x0D,
	MAX77843_LED_REG_DCDC_CNTL1	= 0x0E,
	MAX77843_LED_REG_DCDC_CNTL2	= 0x0F,
	MAX77843_LED_REG_DCDC_ILIM	= 0x10,
	MAX77843_LED_REG_DCDC_OUT	= 0x11,
	MAX77843_LED_REG_DCDC_OUT_MAX	= 0x12,

	MAX77843_LED_REG_LEDEN		= 0x30,
	MAX77843_LED_REG_LED0BRT	= 0x31,
	MAX77843_LED_REG_LED1BRT	= 0x32,
	MAX77843_LED_REG_LED2BRT	= 0x33,
	MAX77843_LED_REG_LED3BRT	= 0x34,
	MAX77843_LED_REG_LEDBLNK	= 0x35,
	MAX77843_LED_REG_LEDRMP		= 0x36,

	MAX77843_LEG_REG_END,
};

/* Slave addr = 0x4A: MUIC */
enum max77843_muic_reg {
	MAX77843_MUIC_REG_ID		= 0x00,
	MAX77843_MUIC_REG_INT1		= 0x01,
	MAX77843_MUIC_REG_INT2		= 0x02,
	MAX77843_MUIC_REG_INT3		= 0x03,
	MAX77843_MUIC_REG_STATUS1	= 0x04,
	MAX77843_MUIC_REG_STATUS2	= 0x05,
	MAX77843_MUIC_REG_STATUS3	= 0x06,
	MAX77843_MUIC_REG_INTMASK1	= 0x07,
	MAX77843_MUIC_REG_INTMASK2	= 0x08,
	MAX77843_MUIC_REG_INTMASK3	= 0x09,
	MAX77843_MUIC_REG_CDETCTRL1	= 0x0A,
	MAX77843_MUIC_REG_CDETCTRL2	= 0x0B,
	MAX77843_MUIC_REG_CTRL1		= 0x0C,
	MAX77843_MUIC_REG_CTRL2		= 0x0D,
	MAX77843_MUIC_REG_CTRL3		= 0x0E,
	MAX77843_MUIC_REG_CTRL4		= 0x16,
	MAX77843_MUIC_REG_HVCTRL1	= 0x17,
	MAX77843_MUIC_REG_HVCTRL2	= 0x18,
	MAX77843_MUIC_REG_HVTXBYTE	= 0x19,
	MAX77843_MUIC_REG_HVRXBYTE1	= 0x1A,
	MAX77843_MUIC_REG_HVRXBYTE2	= 0x1B,
	MAX77843_MUIC_REG_HVRXBYTE3	= 0x1C,
	MAX77843_MUIC_REG_HVRXBYTE4	= 0x1D,
	MAX77843_MUIC_REG_HVRXBYTE5	= 0x1E,
	MAX77843_MUIC_REG_HVRXBYTE6	= 0x1F,
	MAX77843_MUIC_REG_HVRXBYTE7	= 0x20,
	MAX77843_MUIC_REG_HVRXBYTE8	= 0x21,
	MAX77843_MUIC_REG_HVRXBYTE9	= 0x22,
	MAX77843_MUIC_REG_HVRXBYTE10	= 0x23,
	MAX77843_MUIC_REG_HVRXBYTE11	= 0x24,
	MAX77843_MUIC_REG_HVRXBYTE12	= 0x25,
	MAX77843_MUIC_REG_HVRXBYTE13	= 0x26,
	MAX77843_MUIC_REG_HVRXBYTE14	= 0x27,
	MAX77843_MUIC_REG_HVRXBYTE15	= 0x28,
	MAX77843_MUIC_REG_HVRXBYTE16	= 0x29,

	MAX77843_MUIC_REG_END,
};

enum max77843_vbadc
{
	MAX77843_MVBUS_VBDET,
	MAX77843_MVBUS_4V_5V,
	MAX77843_MVBUS_5V_6V,
	MAX77843_MVBUS_6V_7V,
	MAX77843_MVBUS_7V_8V,
	MAX77843_MVBUS_8V_9V,
	MAX77843_MVBUS_9V_10V,
	MAX77843_MVBUS_10V_11V,
	MAX77843_MVBUS_11V_12V,
	MAX77843_MVBUS_12V_13V,
	MAX77843_MVBUS_13V_14V,
	MAX77843_MVBUS_14V_15V,
	MAX77843_MVBUS_15V_16V,
	MAX77843_MVBUS_16V_17V,
	MAX77843_MVBUS_17V_18V,
	MAX77843_MVBUS_18V_19V,
	MAX77843_MVBUS_19V
};

/* MAX77843 REGISTER ENABLE or DISABLE bit */
#define MAX77843_ENABLE_BIT 1
#define MAX77843_DISABLE_BIT 0

/* MAX77843 STATUS1 register */
#define MAX77843_STATUS1_ADC_SHIFT		0
#define MAX77843_STATUS1_ADCERR_SHIFT		6
#define MAX77843_STATUS1_ADC1K_SHIFT		7
#define MAX77843_STATUS1_ADC_MASK		(0x1f << MAX77843_STATUS1_ADC_SHIFT)
#define MAX77843_STATUS1_ADCERR_MASK		(0x1 << MAX77843_STATUS1_ADCERR_SHIFT)
#define MAX77843_STATUS1_ADC1K_MASK		(0x1 << MAX77843_STATUS1_ADC1K_SHIFT)

/* MAX77843 STATUS2 register */
#define MAX77843_STATUS2_CHGTYP_SHIFT		0
#define MAX77843_STATUS2_CHGDETRUN_SHIFT	3
#define MAX77843_STATUS2_DCDTMR_SHIFT		4
#define MAX77843_STATUS2_DXOVP_SHIFT		5
#define MAX77843_STATUS2_VBVOLT_SHIFT		6
#define MAX77843_STATUS2_CHGTYP_MASK		(0x7 << MAX77843_STATUS2_CHGTYP_SHIFT)
#define MAX77843_STATUS2_CHGDETRUN_MASK		(0x1 << MAX77843_STATUS2_CHGDETRUN_SHIFT)
#define MAX77843_STATUS2_DCDTMR_MASK		(0x1 << MAX77843_STATUS2_DCDTMR_SHIFT)
#define MAX77843_STATUS2_DXOVP_MASK		(0x1 << MAX77843_STATUS2_DXOVP_SHIFT)
#define MAX77843_STATUS2_VBVOLT_MASK		(0x1 << MAX77843_STATUS2_VBVOLT_SHIFT)

/* MAX77843 STATUS3 register */
#define MAX77843_STATUS3_VBADC_SHIFT		0
#define MAX77843_STATUS3_VDNMON_SHIFT		4
#define MAX77843_STATUS3_DNRES_SHIFT		5
#define MAX77843_STATUS3_MPNACK_SHIFT		6
#define MAX77843_STATUS3_VBADC_MASK		(0x1 << MAX77843_STATUS3_VBADC_SHIFT)
#define MAX77843_STATUS3_VDNMON_MASK		(0x1 << MAX77843_STATUS3_VDNMON_SHIFT)
#define MAX77843_STATUS3_DNRES_MASK		(0x1 << MAX77843_STATUS3_DNRES_SHIFT)
#define MAX77843_STATUS3_MPNACK_MASK		(0x1 << MAX77843_STATUS3_MPNACK_SHIFT)

/* MAX77843 CDETCTRL1 register */
#define MAX77843_CDETCTRL1_CHGDETEN_SHIFT	0
#define MAX77843_CDETCTRL1_CHGTYPM_SHIFT	1
#define MAX77843_CDETCTRL1_DCDEN_SHIFT		2
#define MAX77843_CDETCTRL1_DCD2SCT_SHIFT	3
#define MAX77843_CDETCTRL1_CDDELAY_SHIFT	4
#define MAX77843_CDETCTRL1_DCDCPL_SHIFT		5
#define MAX77843_CDETCTRL1_CDPDET_SHIFT		7
#define MAX77843_CDETCTRL1_CHGDETEN_MASK	(0x1 << MAX77843_CDETCTRL1_CHGDETEN_SHIFT)
#define MAX77843_CDETCTRL1_CHGTYPM_MASK		(0x1 << MAX77843_CDETCTRL1_CHGTYPM_SHIFT)
#define MAX77843_CDETCTRL1_DCDEN_MASK		(0x1 << MAX77843_CDETCTRL1_DCDEN_SHIFT)
#define MAX77843_CDETCTRL1_DCD2SCT_MASK		(0x1 << MAX77843_CDETCTRL1_DCD2SCT_SHIFT)
#define MAX77843_CDETCTRL1_CDDELAY_MASK		(0x1 << MAX77843_CDETCTRL1_CDDELAY_SHIFT)
#define MAX77843_CDETCTRL1_DCDCPL_MASK		(0x1 << MAX77843_CDETCTRL1_DCDCPL_SHIFT)
#define MAX77843_CDETCTRL1_CDPDET_MASK		(0x1 << MAX77843_CDETCTRL1_CDPDET_SHIFT)

/* MAX77843 CDETCTRL2 register */
#define MAX77843_CDETCTRL2_DXOVPEN_SHIFT	3
#define MAX77843_CDETCTRL2_DXOVPEN_MASK		(0x1 << MAX77843_CDETCTRL2_DXOVPEN_SHIFT)

/* MAX77843 CONTROL1 register */
#define MAX77843_CTRL1_CLEAR_IDBEN_MICEN_MASK	0x3f
#define MAX77843_CTRL1_COMN1SW_SHIFT		0x0
#define MAX77843_CTRL1_COMP2SW_SHIFT		0x3
#define MAX77843_CTRL1_MICEN_SHIFT		0x6
#define MAX77843_CTRL1_COMN1SW_MASK		(0x7 << MAX77843_CTRL1_COMN1SW_SHIFT)
#define MAX77843_CTRL1_COMP2SW_MASK		(0x7 << MAX77843_CTRL1_COMP2SW_SHIFT)
#define MAX77843_CTRL1_MICEN_MASK		(0x1 << MAX77843_CTRL1_MICEN_SHIFT)

/* MAX77843 CONTROL2 register */
#define MAX77843_CTRL2_ACCDET_SHIFT		5
#define MAX77843_CTRL2_CPEn_SHIFT		2
#define MAX77843_CTRL2_LOWPWD_SHIFT		0
#define MAX77843_CTRL2_ACCDET_MASK		(0x1 << MAX77843_CTRL2_ACCDET_SHIFT)
#define MAX77843_CTRL2_CPEn_MASK		(0x1 << MAX77843_CTRL2_CPEn_SHIFT)
#define MAX77843_CTRL2_LOWPWD_MASK		(0x1 << MAX77843_CTRL2_LOWPWD_SHIFT)
#define MAX77843_CTRL2_CPEn1_LOWPWD0 ((MAX77843_ENABLE_BIT << MAX77843_CTRL2_CPEn_SHIFT) | \
				(MAX77843_DISABLE_BIT << MAX77843_CTRL2_LOWPWD_SHIFT))
#define MAX77843_CTRL2_CPEn0_LOWPWD1 ((MAX77843_DISABLE_BIT << MAX77843_CTRL2_CPEn_SHIFT) | \
				(MAX77843_ENABLE_BIT << MAX77843_CTRL2_LOWPWD_SHIFT))

/* MAX77843 CONTROL3 register */
#define MAX77843_CTRL3_JIGSET_SHIFT		0
#define MAX77843_CTRL3_JIGSET_MASK		(0x3 << MAX77843_CTRL3_JIGSET_SHIFT)

/* MAX77843 CONTROL4 register */
#define MAX77843_CTRL4_ADCDBSET_SHIFT		0
#define MAX77843_CTRL4_USBAUTO_SHIFT		4
#define MAX77843_CTRL4_FCTAUTO_SHIFT		5
#define MAX77843_CTRL4_ADCMODE_SHIFT		6
#define MAX77843_CTRL4_ADCDBSET_MASK		(0x3 << MAX77843_CTRL4_ADCDBSET_SHIFT)
#define MAX77843_CTRL4_USBAUTO_MASK		(0x1 << MAX77843_CTRL4_USBAUTO_SHIFT)
#define MAX77843_CTRL4_FCTAUTO_MASK		(0x1 << MAX77843_CTRL4_FCTAUTO_SHIFT)
#define MAX77843_CTRL4_ADCMODE_MASK		(0x3 << MAX77843_CTRL4_ADCMODE_SHIFT)

/* MAX77843 HVCONTROL1 register */
#define MAX77843_HVCTRL1_DPDNVDEN_SHIFT		0
#define MAX77843_HVCTRL1_DNVD_SHIFT		1
#define MAX77843_HVCTRL1_DPVD_SHIFT		3
#define MAX77843_HVCTRL1_VBUSADCEN_SHIFT	5
#define MAX77843_HVCTRL1_DPDNVDEN_MASK		(0x1 << MAX77843_HVCTRL1_DPDNVDEN_SHIFT)
#define MAX77843_HVCTRL1_DNVD_MASK		(0x3 << MAX77843_HVCTRL1_DNVD_SHIFT)
#define MAX77843_HVCTRL1_DPVD_MASK		(0x3 << MAX77843_HVCTRL1_DPVD_SHIFT)
#define MAX77843_HVCTRL1_VBUSADCEN_MASK		(0x1 << MAX77843_HVCTRL1_VBUSADCEN_SHIFT)

/* MAX77843 HVCONTROL2 register */
#define MAX77843_HVCTRL2_HVDIGEN_SHIFT		0
#define MAX77843_HVCTRL2_DP06EN_SHIFT		1
#define MAX77843_HVCTRL2_DNRESEN_SHIFT		2
#define MAX77843_HVCTRL2_MPING_SHIFT		3
#define MAX77843_HVCTRL2_MTXEN_SHIFT		4
#define MAX77843_HVCTRL2_MTXBUSRES_SHIFT	5
#define MAX77843_HVCTRL2_MPNGENB_SHIFT		6
#define MAX77843_HVCTRL2_HVDIGEN_MASK		(0x1 << MAX77843_HVCTRL2_HVDIGEN_SHIFT)
#define MAX77843_HVCTRL2_DP06EN_MASK		(0x1 << MAX77843_HVCTRL2_DP06EN_SHIFT)
#define MAX77843_HVCTRL2_DNRESEN_MASK		(0x1 << MAX77843_HVCTRL2_DNRESEN_SHIFT)
#define MAX77843_HVCTRL2_MPING_MASK		(0x1 << MAX77843_HVCTRL2_MPING_SHIFT)
#define MAX77843_HVCTRL2_MTXEN_MASK		(0x1 << MAX77843_HVCTRL2_MTXEN_SHIFT)
#define MAX77843_HVCTRL2_MTXBUSRES_MASK		(0x1 << MAX77843_HVCTRL2_MTXBUSRES_SHIFT)
#define MAX77843_HVCTRL2_MPNGENB_MASK		(0x1 << MAX77843_HVCTRL2_MPNGENB_SHIFT)

/* Interrupt 1 */
#define MAX77843_INT_DETACH		(0x1 << 1)
#define MAX77843_INT_ATTACH		(0x1 << 0)

/* muic register value for COMN1, COMN2 in CTRL1 reg  */
enum max77843_reg_ctrl1_val {
	MAX77843_MUIC_CTRL1_BIN_0_000 = 0x00,
	MAX77843_MUIC_CTRL1_BIN_1_001 = 0x01,
	MAX77843_MUIC_CTRL1_BIN_2_010 = 0x02,
	MAX77843_MUIC_CTRL1_BIN_3_011 = 0x03,
	MAX77843_MUIC_CTRL1_BIN_4_100 = 0x04,
	MAX77843_MUIC_CTRL1_BIN_5_101 = 0x05,
	MAX77843_MUIC_CTRL1_BIN_6_110 = 0x06,
	MAX77843_MUIC_CTRL1_BIN_7_111 = 0x07,
};

enum max77843_switch_sel_val {
	MAX77843_SWITCH_SEL_1st_BIT_USB		= 0x1 << 0,
	MAX77843_SWITCH_SEL_2nd_BIT_UART	= 0x1 << 1,
};

enum max77843_reg_ctrl1_type {
	MAX77843_CTRL1_AP_USB =
		(MAX77843_MUIC_CTRL1_BIN_1_001 << MAX77843_CTRL1_COMP2SW_SHIFT)
		| MAX77843_MUIC_CTRL1_BIN_1_001 ,
	MAX77843_CTRL1_AUDIO =
		(MAX77843_MUIC_CTRL1_BIN_2_010 << MAX77843_CTRL1_COMP2SW_SHIFT)
		| MAX77843_MUIC_CTRL1_BIN_2_010 ,
	MAX77843_CTRL1_CP_USB =
		(MAX77843_MUIC_CTRL1_BIN_4_100 << MAX77843_CTRL1_COMP2SW_SHIFT)
		| MAX77843_MUIC_CTRL1_BIN_4_100 ,
	MAX77843_CTRL1_AP_UART =
		(MAX77843_MUIC_CTRL1_BIN_3_011 << MAX77843_CTRL1_COMP2SW_SHIFT)
		| MAX77843_MUIC_CTRL1_BIN_3_011 ,
	MAX77843_CTRL1_CP_UART =
		(MAX77843_MUIC_CTRL1_BIN_5_101 << MAX77843_CTRL1_COMP2SW_SHIFT)
		| MAX77843_MUIC_CTRL1_BIN_5_101 ,
};
/*TODO must modify H/W rev.5*/

enum max77843_irq_source {
	MAX77843_LED_INT = 0,
	MAX77843_TOPSYS_INT,
	MAX77843_CHG_INT,
	MAX77843_FUEL_INT,
	MAX77843_MUIC_INT1,
	MAX77843_MUIC_INT2,
	MAX77843_MUIC_INT3,

	MAX77843_IRQ_GROUP_NR,
};

enum max77843_irq {
	/* PMIC; Charger */
	MAX77843_CHG_IRQ_BYP_I,
	MAX77843_CHG_IRQ_BATP_I,
	MAX77843_CHG_IRQ_BAT_I,
	MAX77843_CHG_IRQ_CHG_I,
	MAX77843_CHG_IRQ_WCIN_I,
	MAX77843_CHG_IRQ_CHGIN_I,
	MAX77843_CHG_IRQ_AICL_I,

	/* Fuelgauge */
	MAX77843_FG_IRQ_ALERT,

	/* MUIC INT1 */
	MAX77843_MUIC_IRQ_INT1_ADC,
	MAX77843_MUIC_IRQ_INT1_RSVD,
	MAX77843_MUIC_IRQ_INT1_ADCERR,
	MAX77843_MUIC_IRQ_INT1_ADC1K,

	/* MUIC INT2 */
	MAX77843_MUIC_IRQ_INT2_CHGTYP,
	MAX77843_MUIC_IRQ_INT2_CHGDETREUN,
	MAX77843_MUIC_IRQ_INT2_DCDTMR,
	MAX77843_MUIC_IRQ_INT2_DXOVP,
	MAX77843_MUIC_IRQ_INT2_VBVOLT,

	/* MUIC INT3 */
	MAX77843_MUIC_IRQ_INT3_VBADC,
	MAX77843_MUIC_IRQ_INT3_VDNMON,
	MAX77843_MUIC_IRQ_INT3_DNRES,
	MAX77843_MUIC_IRQ_INT3_MPNACK,
	MAX77843_MUIC_IRQ_INT3_MRXBUFOW,
	MAX77843_MUIC_IRQ_INT3_MRXTRF,
	MAX77843_MUIC_IRQ_INT3_MRXPERR,
	MAX77843_MUIC_IRQ_INT3_MRXRDY,

	MAX77843_IRQ_NR,
};

struct max77843_dev {
	struct device *dev;
	struct i2c_client *i2c; /* 0x92; Haptic, pmic */
	struct i2c_client *topsys; /*0x92; topsis */
	struct i2c_client *charger; /* 0xD2; Charger */
	struct i2c_client *fuelgauge; /* 0x6C; Fuelgauge */
	struct i2c_client *muic; /* 0x4A; MUIC */
	struct i2c_client *led; /* 0x94; LED */
	struct mutex iolock;

	int type;

	int irq;
	int irq_base;
	int irq_gpio;
	bool wakeup;
	struct mutex irqlock;
	int irq_masks_cur[MAX77843_IRQ_GROUP_NR];
	int irq_masks_cache[MAX77843_IRQ_GROUP_NR];

#ifdef CONFIG_HIBERNATION
	/* For hibernation */
	u8 reg_pmic_dump[MAX77843_PMIC_REG_END];
	u8 reg_muic_dump[MAX77843_MUIC_REG_END];
	u8 reg_led_dump[MAX77843_LED_REG_END];
#endif

	struct pinctrl *max_pinctrl;
	struct pinctrl_state *gpio_state_active;
	struct pinctrl_state *gpio_state_suspend;

	/* pmic revision */
	u8 pmic_rev;	/* REV */
	u8 pmic_ver;	/* VERSION */

	struct max77843_platform_data *pdata;
};

enum max77843_types {
	TYPE_MAX77843,
};

extern struct device *switch_dev;
extern int max77843_irq_init(struct max77843_dev *max77843);
extern void max77843_irq_exit(struct max77843_dev *max77843);
extern int max77843_irq_resume(struct max77843_dev *max77843);

extern int max77843_read_reg(struct i2c_client *i2c, u8 reg, u8 *dest);
extern int max77843_bulk_read(struct i2c_client *i2c, u8 reg, int count,
				u8 *buf);
extern int max77843_read_word(struct i2c_client *i2c, u8 reg);
extern int max77843_write_reg(struct i2c_client *i2c, u8 reg, u8 value);
extern int max77843_bulk_write(struct i2c_client *i2c, u8 reg, int count,
				u8 *buf);
extern int max77843_write_word(struct i2c_client *i2c, u8 reg, u16 value);
extern int max77843_update_reg(struct i2c_client *i2c,
				u8 reg, u8 val, u8 mask);
extern void max77843_muic_set_chgdeten(int enable);
#if !defined(CONFIG_EXTCON_MAX77843)
extern int max77843_muic_get_charging_type(void);
#endif
extern int max77843_muic_get_status1_adc1k_value(void);
extern int max77843_muic_get_status1_adc_value(void);
extern void otg_control(int);
extern void powered_otg_control(int);
extern int max77843_muic_set_audio_switch(bool enable);

#ifdef CONFIG_MFD_MAX77843
#if 0
enum cable_type_muic {
	MAX77843_CABLE_TYPE_NONE_MUIC = 0,		/* 0 */
	MAX77843_CABLE_TYPE_USB_MUIC,			/* 1 */
	MAX77843_CABLE_TYPE_OTG_MUIC,			/* 2 */
	MAX77843_CABLE_TYPE_TA_MUIC,			/* 3 */
	MAX77843_CABLE_TYPE_HV_TA_MUIC,
	CABLE_TYPE_DESKDOCK_MUIC,		/* 4 */
	CABLE_TYPE_CARDOCK_MUIC,		/* 5 */
	CABLE_TYPE_JIG_UART_OFF_MUIC,		/* 6 */
	CABLE_TYPE_JIG_UART_OFF_VB_MUIC,	/* 7 VBUS enabled */
	CABLE_TYPE_JIG_UART_ON_MUIC,		/* 8 */
	CABLE_TYPE_JIG_USB_OFF_MUIC,		/* 9 */
	CABLE_TYPE_JIG_USB_ON_MUIC,		/* 10 */
	CABLE_TYPE_MHL_MUIC,			/* 11 */
	CABLE_TYPE_MHL_VB_MUIC,			/* 12 */
	CABLE_TYPE_SMARTDOCK_MUIC,		/* 13 */
	CABLE_TYPE_SMARTDOCK_TA_MUIC,		/* 14 */
	CABLE_TYPE_SMARTDOCK_USB_MUIC,		/* 15 */
	CABLE_TYPE_AUDIODOCK_MUIC,		/* 16 */
	CABLE_TYPE_INCOMPATIBLE_MUIC,		/* 17 */
	CABLE_TYPE_CDP_MUIC,			/* 18 */
#if defined(CONFIG_MUIC_SUPPORT_HMT_DETECTION)
	CABLE_TYPE_HMT_MUIC,
	CABLE_TYPE_HMT_TA_MUIC,
#endif
#if defined(CONFIG_MUIC_DET_JACK)
	CABLE_TYPE_EARJACK_MUIC,		/* 19 */
#endif
	CABLE_TYPE_UNKNOWN_MUIC			/* 20 */
};
#endif
enum {
	MAX77843_OPEN_USB_MODE = 0,
	MAX77843_AP_USB_MODE,
	MAX77843_AUDIO_MODE,
	MAX77843_CP_USB_MODE,
};

enum {
	MAX77843_ADC_ALWAYS = 0,
	MAX77843_ADC_ALWAYS_1M,
	MAX77843_ADC_ONESHOT,
	MAX77843_ADC_PULSE,
};

enum usb_cable_status {
	MAX77843_USB_CABLE_DETACHED = 0,
	MAX77843_USB_CABLE_ATTACHED,
	MAX77843_USB_OTGHOST_DETACHED,
	MAX77843_USB_OTGHOST_ATTACHED,
	MAX77843_USB_POWERED_HOST_DETACHED,
	MAX77843_USB_POWERED_HOST_ATTACHED,
	MAX77843_USB_CABLE_DETACHED_WITHOUT_NOTI,
};

#if defined(CONFIG_MUIC_DET_JACK)
enum {
	MAX77843_NOT_INIT = 0,
	MAX77843_INIT_START,
	MAX77843_INIT_DONE,
};
#endif

#endif /* CONFIG_MFD_MAX77843 */

#endif /*  __LINUX_MFD_MAX77843_PRIV_H */
